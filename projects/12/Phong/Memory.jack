// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	
	static Array freeList;
	static int heapBase;
	static int heapLimit;
	static int LENGTH;
	static int NEXT;
	static int ALLOC_LENGTH;
    /** Initializes the class. */
    function void init() {
		let heapBase = 2048;
		let heapLimit = 16383;
		let ALLOC_LENGTH = -1;
		let LENGTH = 0;
		let NEXT = 1;
		let freeList = heapBase;
		let freeList[LENGTH] = heapLimit - heapBase + 1;
		let freeList[NEXT] = null;
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		var Array memory;
		let memory = 0;
		return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		var Array memory;
		let memory = 0;
		let memory[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		
        var Array foundBlock,nextBlock,result;

        let foundBlock = Memory.bestFitBlock(size);
        let result = foundBlock + 1;

        if(~(foundBlock = null)){
            if(foundBlock[LENGTH] > (size + 3)){
                let nextBlock = foundBlock + size + 1;
                let nextBlock[NEXT] = foundBlock[NEXT];
                let nextBlock[LENGTH] = foundBlock[LENGTH] - size - 1;
                let result[ALLOC_LENGTH] = size + 1;
                let freeList = nextBlock;
            }
			else{
                let nextBlock = foundBlock[NEXT];
                let result[ALLOC_LENGTH] = foundBlock[LENGTH];
            }

            let foundBlock = nextBlock;

        }

        return result;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(int object) {
		var Array preBlock, nextBlock;
		var int size;
		
		let size = object[ALLOC_LENGTH];
		let object = object - 1;
		let preBlock = Memory.findPreFree(object);
		
		if(preBlock = null)
		{
			let object[LENGTH] = size;
			let object[NEXT] = freeList;
			let freeList = object;
		}
		else
		{
			if(preBlock + preBlock[LENGTH] = object)
			{
				let preBlock[LENGTH] = preBlock[LENGTH] + size;
				let object = preBlock;
			}
			else
			{
				let object[LENGTH] = size;
				let object[NEXT] = preBlock[NEXT];
				let preBlock[NEXT] = object;
			}
		}
		
		if((object + object[LENGTH]) = object[NEXT])
		{
			let nextBlock = object[NEXT];
			let object[LENGTH] = object[LENGTH] + nextBlock[LENGTH];
			let object[NEXT] = nextBlock[NEXT];
		}
		return;
    }   
	
	function Array bestFitBlock(int size){
		var Array curBlock, bestBlock;
		var int bestSize, curSize;
		
		let bestBlock = null;
		let bestSize = heapLimit - heapBase + 1;
		let curBlock = freeList;
		
		if(curBlock[NEXT] = null)
		{
			return curBlock;
		}
		
		while(~(curBlock = null))
		{
			let curSize = curBlock[LENGTH] - 1;
			
            if(~(curSize < size) & (curSize < bestSize)){

                let bestBlock = curBlock;
                let bestSize = curSize;

            }
			
			let curBlock = curBlock[NEXT];
		}
		
		return bestBlock;
	}
	function Array findPreFree(int object){
        var Array preBlock;

        if(freeList > object){
            return null;
        }
        let preBlock = freeList;
        while(~(preBlock[NEXT] = null) & (preBlock[NEXT] < object)){
            let preBlock = preBlock[NEXT];
        }

        return preBlock;

    }
}
