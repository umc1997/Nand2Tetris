// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field Array string;
	field int maxLen;
	field int ptr;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(maxLength = 0)
		{
			let maxLength = 1;
		}
		let maxLen = maxLength;
		let string = Array.new(maxLen);
		let ptr = 0;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do string.dispose();
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return ptr;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return string[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let string[j] = c;
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if(ptr < maxLen)
		{
			let string[ptr] = c;
			let ptr = ptr + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if(ptr > 0)
		{
			let string[ptr] = null;
			let ptr = ptr - 1;
		}
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
		var int idx;
		var int result;
		var boolean isNegative;
		if((ptr > 0) & string[0] =45)
		{
			let isNegative = true;
			let idx = 1;
		}
		else{
			let isNegative = false;
			let idx = 0;
		}
		
		while((idx < ptr) & String.isDigit(string[idx]))
		{
			let result = (result * 10) + string[idx] - 48;
			let idx = idx + 1;
		}
		
		
		if(isNegative)
		{
			let result = -result;
		}
		return result;
    }
	function boolean isDigit(char c)
	{
		return ~(c < 48) & ~(c > 57);
	}
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
		let ptr = 0 ;
		
		if( val < 0 )
		{
			let val = -val;
			do appendChar(45);
		}
		
		do int2String(val);
		
		return;
    }
	
	method void int2String(int n)
	{
		var int nextNum;
		var int c;
		if(n < 10)
		{	
			let c = n + 48;
			do appendChar(c);
		}
		else
		{
			let nextNum = n / 10;
			do int2String(nextNum);
			let c = n - (nextNum * 10);
			let c = c + 48;
			do appendChar(c);
		}
		return;
	}
    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
}
