// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static int twoToThe;
    /** Initializes the library. */
    function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384 + 16384;
		return;
    }
	function boolean bit(int x, int n)
	{
		return ~((x & twoToThe[n]) = 0);
	}
    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x < 0)
		{
			let x = (-x);
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int i, sum, shiftedX;
		let i = 0;
		let sum = 0;
		let shiftedX = x;

		while(i < 16)
		{
			if(Math.bit(y, i))
			{
				let sum = sum + shiftedX;
			}	
			let i = i + 1;
			let shiftedX = shiftedX + shiftedX;
		}
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int absx, absy , result;
		var int q,i;
		var boolean isNegative;
		let absx = Math.abs(x);
		let absy = Math.abs(y);
		if(absy > absx)
		{
			return 0;
		}
		let q = Math.divide(absx, absy + absy) ;
		let i = absx - (2 * q * absy) ;
		if(i < absy)
		{
			let result = q + q;
		}
		else
		{
			let result = q + q + 1;
		}
		if(((x < 0) & (y > 0)) | ((x > 0) & (y < 0)))
		{
			let result = (-result);
		}
		return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int p, q, j, y;
		let y = 0;
		let j = 7;
		while(j > -1)
		{
			let p = y + twoToThe[j];
			let q = p * p;
			if(~(q > x) & (q > 0))
			{
				let y = p;
			}
			let j = j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if(a > b)
		{
			return a;
		}
		else
		{
			return b;
		}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a > b)
		{
			return b;
		}
		else
		{
			return a;
		}
    }
}
