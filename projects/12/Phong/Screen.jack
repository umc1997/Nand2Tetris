// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array twoThe;
	static int pixel_address;
	static boolean color;
    /** Initializes the Screen. */
    function void init() {
		var int ptr;
		let pixel_address = 16384;
		let color = true;
		let twoThe = Array.new(17);
		let twoThe[0] = 1;
		while(ptr < 16)
		{
			let ptr = ptr + 1;
			let twoThe[ptr] = twoThe[ptr - 1] + twoThe[ptr - 1];
		}
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var int pixel;
		while(pixel < 8192)
		{
			let pixel_address[pixel] = 0;
			let pixel = pixel + 1;
		}
		return;
    }
	function void updateLocation(int x, int sel)
	{
		if(color)
		{
			let pixel_address[x] = pixel_address[x] | sel;
		}
		else
		{
			let pixel_address[x] = pixel_address[x] & (~sel);
		}
		return ; 
	}
    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int tmp, bitNum , pixelNum;
		if((x < 0) | (x > 511) | (y < 0) | (y > 255))
		{
			do Sys.error(7);
		}
		let tmp = x / 16;
		let bitNum = x - (tmp * 16);
		let pixelNum = (y * 32) + tmp;
		do Screen.updateLocation(pixelNum,twoThe[bitNum]);
		return;
    }
	function void drawConditional(int x, int y, boolean cond) {
		if(cond)
		{
			do Screen.drawPixel(y, x);
		}
		else
		{
			do Screen.drawPixel(x, y);
		}
		return ;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
	function void drawLine(int x1, int y1, int x2, int y2)
	{
		var int startX,startY,dy,dx,tmp,adyMinusbdx;
		var boolean isdyBigger,isDecrease;
		var int end,dydy,dxdx;
		if((x1 < 0) | (x2 > 511) | (y1 < 0) | (y2 > 255))
		{
			do Sys.error(8);
		}
		let dx = Math.abs(x2 - x1);
		let dy = Math.abs(y2 - y1);
		let isdyBigger = (dx < dy);
		if((isdyBigger & (y2 < y1)) | ((~isdyBigger) & (x2 < x1)))
		{
			let tmp = x1;
			let x1 = x2;
			let x2 = tmp;
			let tmp = y1;
			let y1 = y2;
			let y2 = tmp;
		}
		if(isdyBigger)
		{
			let tmp = dx;
			let dx = dy;
			let dy = tmp;
			let startY = y1;
			let startX = x1;
			let end = y2;
			let isDecrease = (x1 > x2);
		}
		else
		{
			let startY = x1;
			let startX = y1;
			let end = x2;
			let isDecrease = (y1 > y2);
		}
		let adyMinusbdx = (2 * dy) - dx;
		let dydy = 2 * dy;
		let dxdx = 2 * (dy - dx);
		do Screen.drawConditional(startY, startX, isdyBigger);
		while(startY < end)
		{
			if(adyMinusbdx < 0)
			{
				let adyMinusbdx = adyMinusbdx + dydy;
			}
			else
			{
				let adyMinusbdx = adyMinusbdx + dxdx;
				if(isDecrease)
				{
					let startX = startX - 1;
				}
				else
				{
					let startX = startX + 1;
				}
			}
			let startY = startY + 1;
			do Screen.drawConditional(startY, startX, isdyBigger);
		}
		return;
	}
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int pixelNum,destination,length,x1q,x2q,color1,color2,x1r,x2r;
		if((x1 > x2) | (y1 > y2) |(x1 < 0) | (x2 > 511) | (y1 < 0) | (y2 > 255))
		{
			do Sys.error(9);
		}
		let x1q = x1 / 16;
		let x1r = x1 - (x1q * 16);
		let x2q = x2 / 16;
		let x2r = x2 - (x2q * 16);
		let color2 = ~(twoThe[x1r] - 1);
		let color1 = twoThe[x2r+1] - 1;
		let pixelNum = (y1 * 32) + x1q;
		let length = x2q - x1q;
		while(~(y1 > y2))
		{
			let destination = pixelNum + length;
			if(length = 0)
			{
				do Screen.updateLocation(pixelNum,(color1 & color2));
			}
			else
			{
				do Screen.updateLocation(pixelNum, color2);
				let pixelNum = pixelNum + 1;
				while(pixelNum < destination)
				{
					do Screen.updateLocation(pixelNum, -1);
					let pixelNum = pixelNum + 1;
				}
				do Screen.updateLocation(destination, color1);
			}
			let y1 = y1 + 1;
			let pixelNum = destination + 32 - length;
		}
		return;
    }
	function void drawHorizontal(int x, int y, int r)
	{
		var int pixelNum,minq,maxq,destination,color2,color1,length,min,max,minr,maxr;
		let min = Math.min(y, r);
		let max = Math.max(y, r);
		if((x > -1) & (x < 256) & (min < 512) & (max > -1))
		{
			let min = Math.max(min, 0);
			let max = Math.min(max, 511);
			let minq = min / 16;
			let minr = min - (minq * 16);
			let maxq = max / 16;
			let maxr = max - (maxq * 16);
			let color1 = ~(twoThe[minr] - 1);
			let color2 = twoThe[maxr + 1] - 1;
			let pixelNum = x * 32 + minq;
			let length = maxq - minq;
			let destination = pixelNum + length;
			if(length = 0)
			{
				do Screen.updateLocation(pixelNum, (color2 & color1));
			}
			else
			{
				do Screen.updateLocation(pixelNum, color1);
				let pixelNum = pixelNum + 1;
				while(pixelNum < destination)
				{
					do Screen.updateLocation(pixelNum, -1);
					let pixelNum = pixelNum + 1;
				}
				do Screen.updateLocation(destination, color2);
			}
		}
		return;
	}
	function void drawSymetric(int a, int b, int c, int d)
	{	
		do Screen.drawHorizontal((b - d), (a + c), (a - c));
		do Screen.drawHorizontal((b + d), (a + c), (a - c));
		do Screen.drawHorizontal((b - c), (a - d), (a + d));
		do Screen.drawHorizontal((b + c), (a - d), (a + d));
		return;
	}
    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int x1,y1,r1;
		if((x < 0) | (x > 511) | (y < 0) | (y > 255))
		{
			do Sys.error(12);
		}
		if(((x - r)< 0) | ((x + r) > 511) | ((y - r) < 0) | ((y + r) > 255))
		{
			do Sys.error(13);
		}
		let y1 = r;
		let r1 = 1 - r;
		do Screen.drawSymetric(x, y, x1, y1);
		while(y1 > x1)
		{
			if(r1 < 0)
			{
				let r1 = r1 + (2 * x1) + 3;
			}
			else
			{
				let r1 = r1 + (2 * (x1 - y1)) + 5;
				let y1 = y1 - 1;
			}
			let x1 = x1 + 1;
			do Screen.drawSymetric(x, y, x1 ,y1);
		}
		return;
    }
}
